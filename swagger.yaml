openapi: 3.0.0
info:
  title: Remote Provisioning Server API
  contact: {}
  version: 1.3.0
  description: |
    This section is a reference to the RPS API methods available in the Open AMT Cloud Toolkit, and to some commands it provides. 
    Please note when running behind the Kong API proxy the following prefix must be prepended:
    * `/rps` for all routes

    GET Domains Example:
    * Direct connection to RPS: `{{protocol}}://{{host}}/api/v1/admin/domains`

    * Connection to RPS through Kong: `{{protocol}}://{{host}}/rps/api/v1/admin/domains`

servers:
- url: http://example.com:8081/api/v1/admin
  variables: {}
security:
  - BearerAuth: []
paths:
  /domains:
    get:
      tags:
      - Domains
      summary: Get All Domains
      operationId: GetAllDomains
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DomainRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Domains
      summary: Create Domain
      operationId: CreateDomain
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequest'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - Domains
      summary: Update Domain Suffix
      operationId: UpdateDomainSuffix
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainRequest'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /domains/{profileName}:
    get:
      tags:
        - Domains
      summary: Get Domain
      operationId: GetDomain
      parameters:
      - name: profileName
        in: path
        description: Name of domain profile to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/DomainRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
          
      deprecated: false
    delete:
      tags:
      - Domains
      summary: Remove Domain
      operationId: RemoveDomain
      parameters:
      - name: profileName
        in: path
        description: Name of domain profile to remove
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /ciraconfigs:
    get:
      tags:
      - CIRA
      summary: Get All CIRA Configs
      operationId: GetAllCIRAConfigs
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CIRAConfigRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - CIRA
      summary: Create CIRA Config
      operationId: CreateCIRAConfig
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIRAConfigAdd'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - CIRA
      summary: Edit CIRA Config
      operationId: EditCIRAConfig
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CIRAConfigAdd'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /ciraconfigs/{configName}:
    get:
      tags:
      - CIRA
      summary: Get CIRA Config
      operationId: GetCIRAConfig
      parameters:
      - name: configName
        in: path
        description: Name of CIRA config to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CIRAConfigRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    delete:
      tags:
      - CIRA
      summary: Remove CIRA Config
      operationId: RemoveCIRAConfig
      parameters:
      - name: configName
        in: path
        description: Name of CIRA config to return
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /profiles:
    get:
      tags:
      - Profiles
      summary: Get All Profiles
      operationId: GetAllProfiles
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Profiles
      summary: Create Profile
      operationId: CreateProfile
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileAdd'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    patch:
      tags:
      - Profiles
      summary: Update Profile
      operationId: UpdateProfile
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileAdd'
        required: true
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /profiles/{profileName}:
    get:
      tags:
      - Profiles
      summary: Get Profile
      operationId: GetProfile
      parameters:
      - name: profileName
        in: path
        description: Name of profile to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    delete:
      tags:
      - Profiles
      summary: Remove Profile
      operationId: RemoveProfile
      parameters:
      - name: profileName
        in: path
        description: Name of profile to return
        required: true
        schema:
          type: string
      responses:
        204:
          description: 'successful operation'
          headers: {}
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
  /networkconfigs:
    get:
      tags:
      - Networks
      summary: Get All Networks
      operationId: GetAllNetworks
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkConfigRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    post:
      tags:
      - Networks
      summary: Create Network Config
      operationId: CreateNetworkConfig
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkConfigRequest'
        required: true
      responses:
        201:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkConfigRequest'
        400:
          description: 'bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    # patch:
    #   tags:
    #   - Networks
    #   summary: Update Network Config
    #   operationId: UpdateNetworkConfig
    #   requestBody:
    #     description: ''
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/NetworkConfigRequest'
    #     required: true
    #   responses:
    #     200:
    #       description: 'successful operation'
    #       headers: {}
    #     400:
    #       description: 'bad request'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/APIResponse'
    #     500:
    #       description: 'internal server error'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/APIResponse'
    #   deprecated: false
  /networkconfigs/{profileName}:
    get:
      tags:
      - Networks
      summary: Get Network Config
      operationId: GetNetworkConfig
      parameters:
      - name: profileName
        in: path
        description: Name of network config to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: 'successful operation'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkConfigRequest'
        404:
          description: 'not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
        500:
          description: 'internal server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponse'
      deprecated: false
    # delete:
    #   tags:
    #   - Networks
    #   summary: Remove Network Config
    #   operationId: RemoveNetworkConfig
    #   parameters:
    #   - name: profileName
    #     in: path
    #     description: Name of profile to delete
    #     required: true
    #     schema:
    #       type: string
    #   responses:
    #     204:
    #       description: 'successful operation'
    #       headers: {}
    #     404:
    #       description: 'not found'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/APIResponse'
    #     500:
    #       description: 'internal server error'
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/APIResponse'
    #   deprecated: false
  /version:
    get:
      tags:
      - Misc
      summary: Get Version
      operationId: GetVersion
      responses:
        200:
          description: 'successful operation'
          headers: {}
      deprecated: false
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    DomainRequest:
      title: DomainRequest
      type: object
      required:
      - profileName
      - domainSuffix
      - provisioningCertStorageFormat
      properties:
        profileName:
          type: string
        domainSuffix:
          type: string
        provisioningCertStorageFormat:
          type: string
      example:
        profileName: NewDomain
        domainSuffix: NewDomain.com
        provisioningCertStorageFormat: string
    CIRAConfigAdd:
      title: CIRAConfigRequest
      required:
      - configName
      - mpsServerAddress
      - mpsPort
      - username
      - password
      - commonName
      - serverAddressFormat
      - authMethod
      - mpsRootCertificate
      - proxyDetails
      type: object
      properties:
        configName:
          type: string
        mpsServerAddress:
          type: string
        mpsPort:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        commonName:
          type: string
        serverAddressFormat:
          type: integer
          format: int32
        authMethod:
          type: integer
          format: int32
        mpsRootCertificate:
          type: string
        proxyDetails:
          type: string
      example:
        configName: ciraconfig
        mpsServerAddress: 192.168.8.50
        mpsPort: 1000
        username: admin
        password: G@ppm0ym
        commonName: 192.168.8.50
        serverAddressFormat: 3
        authMethod: 2
        mpsRootCertificate: rootcert
        proxyDetails: ''      
    CIRAConfigRequest:
      title: CIRAConfigRequest
      required:
      - configName
      - mpsServerAddress
      - mpsPort
      - username
      - commonName
      - serverAddressFormat
      - authMethod
      - mpsRootCertificate
      - proxyDetails
      type: object
      properties:
        configName:
          type: string
        mpsServerAddress:
          type: string
        mpsPort:
          type: integer
          format: int32
        username:
          type: string
        commonName:
          type: string
        serverAddressFormat:
          type: integer
          format: int32
        authMethod:
          type: integer
          format: int32
        mpsRootCertificate:
          type: string
        proxyDetails:
          type: string
      example:
        configName: ciraconfig
        mpsServerAddress: 192.168.8.50
        mpsPort: 1000
        username: admin
        commonName: 192.168.8.50
        serverAddressFormat: 3
        authMethod: 2
        mpsRootCertificate: rootcert
        proxyDetails: ''      
    ProfileAdd:
      title: ProfileRequest
      required:
      - profileName
      - amtPassword
      - generateRandomPassword
      - passwordLength
      - configurationScript
      - activation
      - ciraConfigName
      - networkConfigName
      - mebxPassword
      - generateRandomMEBxPassword
      - mebxPasswordLength
      - tags
      type: object
      properties:
        profileName:
          type: string
        amtPassword:
          type: string
        generateRandomPassword:
          type: boolean
        passwordLength:
          type: number
        configurationScript:
          type: string
        activation:
          type: string
        ciraConfigName:
          type: string
        networkConfigName:
          type: string
        mebxPassword:
          type: string
        generateRandomMEBxPassword:
          type: boolean
        mebxPasswordLength:
          type: number
        tags:
          type: array
      example:
        profileName: profile1
        amtPassword: G@ppm0ym
        generateRandomPassword: false
        passwordLength: null
        configurationScript: null
        activation: acmactivate      
        ciraConfigName: ciraconfig
        networkConfigName: dhcp_enabled
        mebxPassword: G@ppm0ym
        generateRandomMEBxPassword: false
        mebxPasswordLength: null
        tags: [tag1, tag2]
    ProfileRequest:
      title: ProfileRequest
      required:
      - profileName
      - generateRandomPassword
      - passwordLength
      - configurationScript
      - activation
      - ciraConfigName
      - networkConfigName
      - generateRandomMEBxPassword
      - mebxPasswordLength
      - tags
      type: object
      properties:
        profileName:
          type: string
        generateRandomPassword:
          type: boolean
        passwordLength:
          type: number
        configurationScript:
          type: string
        activation:
          type: string
        ciraConfigName:
          type: string
        networkConfigName:
          type: string
        generateRandomMEBxPassword:
          type: boolean
        mebxPasswordLength:
          type: number
        tags:
          type: array
      example:
        profileName: profile1
        generateRandomPassword: false
        passwordLength: null
        configurationScript: null
        activation: acmactivate      
        ciraConfigName: ciraconfig
        networkConfigName: dhcp_enabled
        generateRandomMEBxPassword: false
        mebxPasswordLength: null
        tags: [tag1, tag2]
    NetworkConfigRequest:
      title: NetworkConfigRequest
      required:
      - profileName
      - dhcpEnabled
      - staticIPShared
      - ipSyncEnabled
      type: object
      properties:
        profileName:
          type: string
        dhcpEnabled:
          type: boolean
        staticIPShared:
          type: boolean
        ipSyncEnabled:
          type: boolean
      example:
        profileName: dhcp_enabled
        dhcpEnabled: true
        staticIPShared: false
        ipSyncEnabled: true
    APIResponse:
      title: APIResponse 
      type: object
      properties:
        error:
          type: string
        message:
          type: string

tags:
- name: Domains
- name: CIRA
- name: Profiles
- name: Networks
- name: Integration
- name: Misc
  description: ''